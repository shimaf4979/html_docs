// jsData.js
export const jsSections = [
  {
    id: "variables",
    title: "変数・データ型",
    color: "bg-blue-50 border-blue-200",
    headerColor: "bg-blue-100",
    methods: [
      {
        method: "var",
        description: "変数宣言（関数スコープ）",
        syntax: "var variableName = value;",
        example: 'var name = "JavaScript";',
        notes: [
          "再宣言可能",
          "再代入可能",
          "関数スコープ",
          "ホイスティングあり",
        ],
      },
      {
        method: "let",
        description: "変数宣言（ブロックスコープ）",
        syntax: "let variableName = value;",
        example: "let age = 25;",
        notes: [
          "再宣言不可",
          "再代入可能",
          "ブロックスコープ",
          "ホイスティングなし",
        ],
      },
      {
        method: "const",
        description: "定数宣言",
        syntax: "const constantName = value;",
        example: "const PI = 3.14159;",
        notes: [
          "再宣言不可",
          "再代入不可",
          "ブロックスコープ",
          "宣言時に初期化必須",
        ],
      },
      {
        method: "typeof",
        description: "データ型の確認",
        syntax: "typeof value",
        example: 'typeof "hello" // "string"',
        notes: ["プリミティブ型の判定", "objectは詳細がわからない"],
      },
      {
        method: "instanceof",
        description: "インスタンスの確認",
        syntax: "object instanceof Constructor",
        example: "array instanceof Array // true",
        notes: ["オブジェクトの型確認", "プロトタイプチェーンを辿る"],
      },
      {
        method: "Array.isArray()",
        description: "配列かどうかの確認",
        syntax: "Array.isArray(value)",
        example: "Array.isArray([1, 2, 3]) // true",
        notes: ["配列の確実な判定方法"],
      },
    ],
  },
  {
    id: "strings",
    title: "文字列メソッド",
    color: "bg-green-50 border-green-200",
    headerColor: "bg-green-100",
    methods: [
      {
        method: "charAt()",
        description: "指定位置の文字を取得",
        syntax: "string.charAt(index)",
        example: '"hello".charAt(1) // "e"',
        notes: ["インデックスは0から開始"],
      },
      {
        method: "charCodeAt()",
        description: "指定位置の文字コードを取得",
        syntax: "string.charCodeAt(index)",
        example: '"A".charCodeAt(0) // 65',
        notes: ["UTF-16コードユニットを返す"],
      },
      {
        method: "concat()",
        description: "文字列の結合",
        syntax: "string.concat(string2, string3, ...)",
        example: '"Hello".concat(" ", "World") // "Hello World"',
        notes: ["元の文字列は変更されない"],
      },
      {
        method: "includes()",
        description: "文字列が含まれるかチェック",
        syntax: "string.includes(searchString, position)",
        example: '"JavaScript".includes("Script") // true',
        notes: ["大文字小文字を区別", "ES6で追加"],
      },
      {
        method: "indexOf()",
        description: "文字列の位置を検索",
        syntax: "string.indexOf(searchValue, fromIndex)",
        example: '"hello world".indexOf("world") // 6',
        notes: ["見つからない場合は-1を返す"],
      },
      {
        method: "lastIndexOf()",
        description: "文字列の最後の位置を検索",
        syntax: "string.lastIndexOf(searchValue, fromIndex)",
        example: '"hello hello".lastIndexOf("hello") // 6',
        notes: ["後ろから検索"],
      },
      {
        method: "slice()",
        description: "文字列の一部を抽出",
        syntax: "string.slice(beginIndex, endIndex)",
        example: '"JavaScript".slice(0, 4) // "Java"',
        notes: ["負の値で後ろから指定可能"],
      },
      {
        method: "substring()",
        description: "文字列の一部を抽出",
        syntax: "string.substring(indexStart, indexEnd)",
        example: '"JavaScript".substring(4) // "Script"',
        notes: ["負の値は0として扱われる"],
      },
      {
        method: "substr()",
        description: "指定位置から指定長の文字列を抽出",
        syntax: "string.substr(start, length)",
        example: '"JavaScript".substr(4, 6) // "Script"',
        notes: ["非推奨、sliceを使用推奨"],
      },
      {
        method: "split()",
        description: "文字列を配列に分割",
        syntax: "string.split(separator, limit)",
        example: '"a,b,c".split(",") // ["a", "b", "c"]',
        notes: ["正規表現も使用可能"],
      },
      {
        method: "replace()",
        description: "文字列の置換",
        syntax: "string.replace(searchValue, replaceValue)",
        example: '"Hello World".replace("World", "JS") // "Hello JS"',
        notes: ["最初の一致のみ置換"],
      },
      {
        method: "replaceAll()",
        description: "文字列の全置換",
        syntax: "string.replaceAll(searchValue, replaceValue)",
        example: '"foo foo".replaceAll("foo", "bar") // "bar bar"',
        notes: ["ES2021で追加"],
      },
      {
        method: "toUpperCase()",
        description: "大文字に変換",
        syntax: "string.toUpperCase()",
        example: '"hello".toUpperCase() // "HELLO"',
        notes: ["元の文字列は変更されない"],
      },
      {
        method: "toLowerCase()",
        description: "小文字に変換",
        syntax: "string.toLowerCase()",
        example: '"HELLO".toLowerCase() // "hello"',
        notes: ["元の文字列は変更されない"],
      },
      {
        method: "trim()",
        description: "前後の空白を削除",
        syntax: "string.trim()",
        example: '"  hello  ".trim() // "hello"',
        notes: ["改行文字も削除される"],
      },
      {
        method: "trimStart() / trimLeft()",
        description: "先頭の空白を削除",
        syntax: "string.trimStart()",
        example: '"  hello".trimStart() // "hello"',
        notes: ["ES2019で追加"],
      },
      {
        method: "trimEnd() / trimRight()",
        description: "末尾の空白を削除",
        syntax: "string.trimEnd()",
        example: '"hello  ".trimEnd() // "hello"',
        notes: ["ES2019で追加"],
      },
      {
        method: "padStart()",
        description: "文字列の先頭を埋める",
        syntax: "string.padStart(targetLength, padString)",
        example: '"5".padStart(3, "0") // "005"',
        notes: ["ES2017で追加"],
      },
      {
        method: "padEnd()",
        description: "文字列の末尾を埋める",
        syntax: "string.padEnd(targetLength, padString)",
        example: '"5".padEnd(3, "0") // "500"',
        notes: ["ES2017で追加"],
      },
      {
        method: "startsWith()",
        description: "文字列で始まるかチェック",
        syntax: "string.startsWith(searchString, position)",
        example: '"JavaScript".startsWith("Java") // true',
        notes: ["ES6で追加"],
      },
      {
        method: "endsWith()",
        description: "文字列で終わるかチェック",
        syntax: "string.endsWith(searchString, length)",
        example: '"JavaScript".endsWith("Script") // true',
        notes: ["ES6で追加"],
      },
      {
        method: "repeat()",
        description: "文字列の繰り返し",
        syntax: "string.repeat(count)",
        example: '"Ha".repeat(3) // "HaHaHa"',
        notes: ["ES6で追加"],
      },
      {
        method: "match()",
        description: "正規表現でマッチング",
        syntax: "string.match(regexp)",
        example: '"Hello 123".match(/\\d+/) // ["123"]',
        notes: ["配列またはnullを返す"],
      },
      {
        method: "search()",
        description: "正規表現で検索",
        syntax: "string.search(regexp)",
        example: '"Hello 123".search(/\\d+/) // 6',
        notes: ["インデックスまたは-1を返す"],
      },
    ],
  },
  {
    id: "arrays",
    title: "配列メソッド",
    color: "bg-purple-50 border-purple-200",
    headerColor: "bg-purple-100",
    methods: [
      {
        method: "push()",
        description: "配列の末尾に要素を追加",
        syntax: "array.push(element1, element2, ...)",
        example: "[1, 2].push(3) // [1, 2, 3]",
        notes: ["元の配列を変更", "新しい配列長を返す"],
      },
      {
        method: "pop()",
        description: "配列の末尾から要素を削除",
        syntax: "array.pop()",
        example: "[1, 2, 3].pop() // 3, 配列は[1, 2]",
        notes: ["元の配列を変更", "削除した要素を返す"],
      },
      {
        method: "unshift()",
        description: "配列の先頭に要素を追加",
        syntax: "array.unshift(element1, element2, ...)",
        example: "[2, 3].unshift(1) // [1, 2, 3]",
        notes: ["元の配列を変更", "新しい配列長を返す"],
      },
      {
        method: "shift()",
        description: "配列の先頭から要素を削除",
        syntax: "array.shift()",
        example: "[1, 2, 3].shift() // 1, 配列は[2, 3]",
        notes: ["元の配列を変更", "削除した要素を返す"],
      },
      {
        method: "concat()",
        description: "配列の結合",
        syntax: "array.concat(array2, array3, ...)",
        example: "[1, 2].concat([3, 4]) // [1, 2, 3, 4]",
        notes: ["元の配列は変更されない", "新しい配列を返す"],
      },
      {
        method: "join()",
        description: "配列を文字列に結合",
        syntax: "array.join(separator)",
        example: '[1, 2, 3].join("-") // "1-2-3"',
        notes: ["区切り文字を指定可能"],
      },
      {
        method: "slice()",
        description: "配列の一部を抽出",
        syntax: "array.slice(start, end)",
        example: "[1, 2, 3, 4].slice(1, 3) // [2, 3]",
        notes: ["元の配列は変更されない"],
      },
      {
        method: "splice()",
        description: "配列の要素を削除・追加",
        syntax: "array.splice(start, deleteCount, item1, item2, ...)",
        example: '[1, 2, 3].splice(1, 1, "a") // [2], 配列は[1, "a", 3]',
        notes: ["元の配列を変更", "削除した要素の配列を返す"],
      },
      {
        method: "indexOf()",
        description: "要素のインデックスを検索",
        syntax: "array.indexOf(searchElement, fromIndex)",
        example: "[1, 2, 3].indexOf(2) // 1",
        notes: ["厳密等価（===）で比較"],
      },
      {
        method: "lastIndexOf()",
        description: "要素の最後のインデックスを検索",
        syntax: "array.lastIndexOf(searchElement, fromIndex)",
        example: "[1, 2, 2, 3].lastIndexOf(2) // 2",
        notes: ["後ろから検索"],
      },
      {
        method: "includes()",
        description: "要素が含まれるかチェック",
        syntax: "array.includes(searchElement, fromIndex)",
        example: "[1, 2, 3].includes(2) // true",
        notes: ["ES2016で追加", "NaNも正しく判定"],
      },
      {
        method: "reverse()",
        description: "配列の順序を逆転",
        syntax: "array.reverse()",
        example: "[1, 2, 3].reverse() // [3, 2, 1]",
        notes: ["元の配列を変更"],
      },
      {
        method: "sort()",
        description: "配列をソート",
        syntax: "array.sort(compareFunction)",
        example: "[3, 1, 2].sort() // [1, 2, 3]",
        notes: ["元の配列を変更", "文字列として比較"],
      },
      {
        method: "forEach()",
        description: "各要素に関数を実行",
        syntax: "array.forEach(callback(element, index, array))",
        example: "[1, 2, 3].forEach(x => console.log(x))",
        notes: ["戻り値なし", "breakできない"],
      },
      {
        method: "map()",
        description: "各要素を変換した新しい配列を作成",
        syntax: "array.map(callback(element, index, array))",
        example: "[1, 2, 3].map(x => x * 2) // [2, 4, 6]",
        notes: ["元の配列は変更されない", "同じ長さの配列を返す"],
      },
      {
        method: "filter()",
        description: "条件に合う要素の配列を作成",
        syntax: "array.filter(callback(element, index, array))",
        example: "[1, 2, 3, 4].filter(x => x % 2 === 0) // [2, 4]",
        notes: ["元の配列は変更されない"],
      },
      {
        method: "find()",
        description: "条件に合う最初の要素を取得",
        syntax: "array.find(callback(element, index, array))",
        example: "[1, 2, 3].find(x => x > 1) // 2",
        notes: ["見つからない場合はundefined"],
      },
      {
        method: "findIndex()",
        description: "条件に合う最初の要素のインデックスを取得",
        syntax: "array.findIndex(callback(element, index, array))",
        example: "[1, 2, 3].findIndex(x => x > 1) // 1",
        notes: ["見つからない場合は-1"],
      },
      {
        method: "some()",
        description: "少なくとも1つの要素が条件を満たすかテスト",
        syntax: "array.some(callback(element, index, array))",
        example: "[1, 2, 3].some(x => x > 2) // true",
        notes: ["真偽値を返す"],
      },
      {
        method: "every()",
        description: "すべての要素が条件を満たすかテスト",
        syntax: "array.every(callback(element, index, array))",
        example: "[1, 2, 3].every(x => x > 0) // true",
        notes: ["真偽値を返す"],
      },
      {
        method: "reduce()",
        description: "配列を単一の値に集約",
        syntax:
          "array.reduce(callback(accumulator, element, index, array), initialValue)",
        example: "[1, 2, 3].reduce((sum, x) => sum + x, 0) // 6",
        notes: ["左から右へ処理"],
      },
      {
        method: "reduceRight()",
        description: "配列を右から単一の値に集約",
        syntax:
          "array.reduceRight(callback(accumulator, element, index, array), initialValue)",
        example: "[1, 2, 3].reduceRight((sum, x) => sum + x, 0) // 6",
        notes: ["右から左へ処理"],
      },
      {
        method: "flat()",
        description: "配列をフラット化",
        syntax: "array.flat(depth)",
        example: "[1, [2, [3]]].flat(2) // [1, 2, 3]",
        notes: ["ES2019で追加", "デフォルトdepthは1"],
      },
      {
        method: "flatMap()",
        description: "mapしてからflat",
        syntax: "array.flatMap(callback(element, index, array))",
        example: "[1, 2].flatMap(x => [x, x * 2]) // [1, 2, 2, 4]",
        notes: ["ES2019で追加", "depth 1のflatのみ"],
      },
    ],
  },
  {
    id: "objects",
    title: "オブジェクト",
    color: "bg-pink-50 border-pink-200",
    headerColor: "bg-pink-100",
    methods: [
      {
        method: "Object.keys()",
        description: "オブジェクトのキーを配列で取得",
        syntax: "Object.keys(obj)",
        example: 'Object.keys({a: 1, b: 2}) // ["a", "b"]',
        notes: ["列挙可能なプロパティのみ"],
      },
      {
        method: "Object.values()",
        description: "オブジェクトの値を配列で取得",
        syntax: "Object.values(obj)",
        example: "Object.values({a: 1, b: 2}) // [1, 2]",
        notes: ["ES2017で追加"],
      },
      {
        method: "Object.entries()",
        description: "オブジェクトのキーと値のペアを配列で取得",
        syntax: "Object.entries(obj)",
        example: 'Object.entries({a: 1, b: 2}) // [["a", 1], ["b", 2]]',
        notes: ["ES2017で追加"],
      },
      {
        method: "Object.assign()",
        description: "オブジェクトのプロパティをコピー",
        syntax: "Object.assign(target, source1, source2, ...)",
        example: "Object.assign({}, {a: 1}, {b: 2}) // {a: 1, b: 2}",
        notes: ["浅いコピー", "ES6で追加"],
      },
      {
        method: "Object.create()",
        description: "指定されたプロトタイプでオブジェクトを作成",
        syntax: "Object.create(prototype, propertiesObject)",
        example: "Object.create(null) // プロトタイプなしのオブジェクト",
        notes: ["プロトタイプ継承"],
      },
      {
        method: "Object.defineProperty()",
        description: "プロパティを詳細に定義",
        syntax: "Object.defineProperty(obj, prop, descriptor)",
        example:
          'Object.defineProperty(obj, "prop", {value: 1, writable: false})',
        notes: ["プロパティディスクリプタ"],
      },
      {
        method: "Object.freeze()",
        description: "オブジェクトを凍結（変更不可）",
        syntax: "Object.freeze(obj)",
        example: "Object.freeze({a: 1}) // プロパティ変更不可",
        notes: ["浅い凍結"],
      },
      {
        method: "Object.seal()",
        description: "オブジェクトを封印（プロパティ追加削除不可）",
        syntax: "Object.seal(obj)",
        example: "Object.seal({a: 1}) // プロパティ値は変更可能",
        notes: ["既存プロパティの値変更は可能"],
      },
      {
        method: "Object.hasOwnProperty()",
        description: "自身のプロパティかチェック",
        syntax: "obj.hasOwnProperty(prop)",
        example: 'obj.hasOwnProperty("prop") // true/false',
        notes: ["継承されたプロパティは除外"],
      },
      {
        method: "Object.getOwnPropertyNames()",
        description: "自身のプロパティ名をすべて取得",
        syntax: "Object.getOwnPropertyNames(obj)",
        example: "Object.getOwnPropertyNames(obj)",
        notes: ["列挙不可能なプロパティも含む"],
      },
      {
        method: "Object.getPrototypeOf()",
        description: "オブジェクトのプロトタイプを取得",
        syntax: "Object.getPrototypeOf(obj)",
        example: "Object.getPrototypeOf([]) === Array.prototype // true",
        notes: ["プロトタイプチェーン確認"],
      },
      {
        method: "Object.setPrototypeOf()",
        description: "オブジェクトのプロトタイプを設定",
        syntax: "Object.setPrototypeOf(obj, prototype)",
        example: "Object.setPrototypeOf(obj, Array.prototype)",
        notes: ["パフォーマンスに影響", "非推奨の場合あり"],
      },
      {
        method: "分割代入",
        description: "オブジェクトのプロパティを変数に展開",
        syntax: "const {prop1, prop2} = obj",
        example: "const {name, age} = person // person.name, person.age",
        notes: ["ES6で追加", "デフォルト値設定可能"],
      },
      {
        method: "スプレッド構文",
        description: "オブジェクトの展開",
        syntax: "{...obj}",
        example: 'const newObj = {...obj, newProp: "value"}',
        notes: ["ES2018で追加", "浅いコピー"],
      },
    ],
  },
  {
    id: "functions",
    title: "関数",
    color: "bg-yellow-50 border-yellow-200",
    headerColor: "bg-yellow-100",
    methods: [
      {
        method: "関数宣言",
        description: "function文による関数定義",
        syntax: "function functionName(parameters) { }",
        example: "function greet(name) { return `Hello, ${name}!`; }",
        notes: ["ホイスティングあり", "関数名必須"],
      },
      {
        method: "関数式",
        description: "変数に関数を代入",
        syntax: "const functionName = function(parameters) { }",
        example: "const greet = function(name) { return `Hello, ${name}!`; }",
        notes: ["ホイスティングなし", "無名関数可能"],
      },
      {
        method: "アロー関数",
        description: "ES6の短縮記法",
        syntax: "(parameters) => { } または parameter => expression",
        example: "const add = (a, b) => a + b",
        notes: ["thisの扱いが異なる", "constructorとして使用不可"],
      },
      {
        method: "call()",
        description: "関数を呼び出し、thisを指定",
        syntax: "function.call(thisArg, arg1, arg2, ...)",
        example: 'greet.call(obj, "World")',
        notes: ["引数を個別に渡す"],
      },
      {
        method: "apply()",
        description: "関数を呼び出し、thisを指定（配列で引数）",
        syntax: "function.apply(thisArg, [argsArray])",
        example: 'greet.apply(obj, ["World"])',
        notes: ["引数を配列で渡す"],
      },
      {
        method: "bind()",
        description: "thisが固定された新しい関数を作成",
        syntax: "function.bind(thisArg, arg1, arg2, ...)",
        example: "const boundGreet = greet.bind(obj)",
        notes: ["部分適用も可能"],
      },
      {
        method: "IIFE",
        description: "即座に実行される関数式",
        syntax: "(function() { })() または (() => { })()",
        example: '(function() { console.log("IIFE"); })();',
        notes: ["スコープの分離", "モジュールパターン"],
      },
      {
        method: "コールバック関数",
        description: "他の関数に渡される関数",
        syntax: "function(callback) { callback(); }",
        example: 'setTimeout(() => console.log("Hello"), 1000)',
        notes: ["非同期処理で頻用"],
      },
      {
        method: "高階関数",
        description: "関数を引数に取ったり返したりする関数",
        syntax: "function higherOrder(fn) { return function() { }; }",
        example: "const double = x => y => x * y * 2",
        notes: ["関数型プログラミング"],
      },
      {
        method: "カリー化",
        description: "複数の引数を取る関数を単一引数の関数の連鎖に変換",
        syntax: "const curry = f => a => b => f(a, b)",
        example: "const add = a => b => a + b; add(1)(2)",
        notes: ["関数の部分適用"],
      },
      {
        method: "クロージャ",
        description: "外部変数を参照する関数",
        syntax:
          "function outer() { let x = 1; return function() { return x; }; }",
        example:
          "const counter = () => { let count = 0; return () => ++count; }",
        notes: ["変数の永続化", "プライベート変数"],
      },
      {
        method: "ジェネレータ関数",
        description: "yield文で値を段階的に生成",
        syntax: "function* generatorFunction() { yield value; }",
        example: "function* counter() { let i = 0; while(true) yield i++; }",
        notes: ["ES6で追加", "Iterator実装"],
      },
      {
        method: "async/await",
        description: "非同期処理の同期的記述",
        syntax: "async function name() { await promise; }",
        example:
          'async function fetchData() { const data = await fetch("/api"); }',
        notes: ["ES2017で追加", "Promiseベース"],
      },
    ],
  },
  {
    id: "async",
    title: "非同期処理",
    color: "bg-indigo-50 border-indigo-200",
    headerColor: "bg-indigo-100",
    methods: [
      {
        method: "setTimeout()",
        description: "指定時間後に関数を実行",
        syntax: "setTimeout(function, delay, ...args)",
        example: 'setTimeout(() => console.log("Hello"), 1000)',
        notes: ["ミリ秒単位", "IDを返す"],
      },
      {
        method: "setInterval()",
        description: "指定間隔で関数を繰り返し実行",
        syntax: "setInterval(function, delay, ...args)",
        example: 'setInterval(() => console.log("Tick"), 1000)',
        notes: ["ミリ秒単位", "IDを返す"],
      },
      {
        method: "clearTimeout()",
        description: "setTimeoutを取り消し",
        syntax: "clearTimeout(timeoutID)",
        example: "clearTimeout(timeoutId)",
        notes: ["タイマーを停止"],
      },
      {
        method: "clearInterval()",
        description: "setIntervalを取り消し",
        syntax: "clearInterval(intervalID)",
        example: "clearInterval(intervalId)",
        notes: ["繰り返しタイマーを停止"],
      },
      {
        method: "Promise",
        description: "非同期処理の結果を表すオブジェクト",
        syntax: "new Promise((resolve, reject) => { })",
        example: 'new Promise((resolve, reject) => { resolve("成功"); })',
        notes: ["ES6で追加", "3つの状態: pending, fulfilled, rejected"],
      },
      {
        method: "Promise.resolve()",
        description: "成功状態のPromiseを作成",
        syntax: "Promise.resolve(value)",
        example: 'Promise.resolve("Hello").then(console.log)',
        notes: ["即座にresolveされたPromise"],
      },
      {
        method: "Promise.reject()",
        description: "失敗状態のPromiseを作成",
        syntax: "Promise.reject(reason)",
        example: 'Promise.reject("Error").catch(console.error)',
        notes: ["即座にrejectされたPromise"],
      },
      {
        method: "Promise.all()",
        description: "全てのPromiseが成功するまで待機",
        syntax: "Promise.all(iterable)",
        example: "Promise.all([promise1, promise2]).then(results => {})",
        notes: ["1つでも失敗すると全体が失敗", "結果は配列"],
      },
      {
        method: "Promise.allSettled()",
        description: "全てのPromiseが完了するまで待機",
        syntax: "Promise.allSettled(iterable)",
        example: "Promise.allSettled([promise1, promise2]).then(results => {})",
        notes: ["ES2020で追加", "成功・失敗問わず全て待つ"],
      },
      {
        method: "Promise.race()",
        description: "最初に完了したPromiseの結果を取得",
        syntax: "Promise.race(iterable)",
        example: "Promise.race([promise1, promise2]).then(result => {})",
        notes: ["最初に解決されたPromiseを返す"],
      },
      {
        method: "Promise.any()",
        description: "最初に成功したPromiseの結果を取得",
        syntax: "Promise.any(iterable)",
        example: "Promise.any([promise1, promise2]).then(result => {})",
        notes: ["ES2021で追加", "全て失敗の場合AggregateError"],
      },
      {
        method: ".then()",
        description: "Promise成功時の処理",
        syntax: "promise.then(onFulfilled, onRejected)",
        example: 'fetch("/api").then(response => response.json())',
        notes: ["新しいPromiseを返す", "チェイン可能"],
      },
      {
        method: ".catch()",
        description: "Promise失敗時の処理",
        syntax: "promise.catch(onRejected)",
        example: 'fetch("/api").catch(error => console.error(error))',
        notes: [".then(null, onRejected)と同等"],
      },
      {
        method: ".finally()",
        description: "Promise完了時の処理（成功・失敗問わず）",
        syntax: "promise.finally(onFinally)",
        example: 'fetch("/api").finally(() => hideLoader())',
        notes: ["ES2018で追加", "引数なし"],
      },
      {
        method: "async function",
        description: "非同期関数の定義",
        syntax: "async function name() { }",
        example: 'async function getData() { return await fetch("/api"); }',
        notes: ["必ずPromiseを返す"],
      },
      {
        method: "await",
        description: "Promiseの結果を待機",
        syntax: "await promise",
        example: 'const data = await fetch("/api")',
        notes: ["async関数内でのみ使用可能", "try-catchでエラーハンドリング"],
      },
    ],
  },
  {
    id: "dom",
    title: "DOM操作",
    color: "bg-red-50 border-red-200",
    headerColor: "bg-red-100",
    methods: [
      {
        method: "document.getElementById()",
        description: "IDで要素を取得",
        syntax: "document.getElementById(id)",
        example: 'document.getElementById("myElement")',
        notes: ["単一要素を返す", "nullの場合あり"],
      },
      {
        method: "document.getElementsByClassName()",
        description: "クラス名で要素を取得",
        syntax: "document.getElementsByClassName(className)",
        example: 'document.getElementsByClassName("myClass")',
        notes: ["HTMLCollectionを返す", "ライブコレクション"],
      },
      {
        method: "document.getElementsByTagName()",
        description: "タグ名で要素を取得",
        syntax: "document.getElementsByTagName(tagName)",
        example: 'document.getElementsByTagName("div")',
        notes: ["HTMLCollectionを返す", "ライブコレクション"],
      },
      {
        method: "document.querySelector()",
        description: "CSSセレクタで最初の要素を取得",
        syntax: "document.querySelector(selector)",
        example: 'document.querySelector(".myClass")',
        notes: ["単一要素を返す", "nullの場合あり"],
      },
      {
        method: "document.querySelectorAll()",
        description: "CSSセレクタで全ての要素を取得",
        syntax: "document.querySelectorAll(selector)",
        example: 'document.querySelectorAll("div.myClass")',
        notes: ["NodeListを返す", "静的コレクション"],
      },
      {
        method: "element.innerHTML",
        description: "要素の内部HTMLを取得・設定",
        syntax: "element.innerHTML = htmlString",
        example: 'div.innerHTML = "<p>Hello</p>"',
        notes: ["HTMLとして解釈", "XSS注意"],
      },
      {
        method: "element.textContent",
        description: "要素のテキスト内容を取得・設定",
        syntax: "element.textContent = textString",
        example: 'div.textContent = "Hello World"',
        notes: ["HTMLタグは文字列として扱う", "より安全"],
      },
      {
        method: "element.innerText",
        description: "表示されるテキストを取得・設定",
        syntax: "element.innerText = textString",
        example: 'div.innerText = "Hello World"',
        notes: ["CSSで非表示の要素は除外"],
      },
      {
        method: "element.getAttribute()",
        description: "属性値を取得",
        syntax: "element.getAttribute(attributeName)",
        example: 'img.getAttribute("src")',
        notes: ["カスタム属性も取得可能"],
      },
      {
        method: "element.setAttribute()",
        description: "属性値を設定",
        syntax: "element.setAttribute(name, value)",
        example: 'img.setAttribute("src", "image.jpg")',
        notes: ["カスタム属性も設定可能"],
      },
      {
        method: "element.removeAttribute()",
        description: "属性を削除",
        syntax: "element.removeAttribute(attributeName)",
        example: 'element.removeAttribute("disabled")',
        notes: ["属性が存在しなくてもエラーなし"],
      },
      {
        method: "element.classList",
        description: "クラスリストの操作",
        syntax: "element.classList.add/remove/toggle/contains(className)",
        example: 'div.classList.add("active")',
        notes: ["add(), remove(), toggle(), contains()メソッド"],
      },
      {
        method: "element.style",
        description: "インラインスタイルの操作",
        syntax: "element.style.property = value",
        example: 'div.style.backgroundColor = "red"',
        notes: ["camelCase記法", "インラインスタイルのみ"],
      },
      {
        method: "document.createElement()",
        description: "新しい要素を作成",
        syntax: "document.createElement(tagName)",
        example: 'const div = document.createElement("div")',
        notes: ["まだDOMに追加されていない"],
      },
      {
        method: "element.appendChild()",
        description: "子要素として追加",
        syntax: "parentElement.appendChild(childElement)",
        example: "parent.appendChild(newElement)",
        notes: ["末尾に追加"],
      },
      {
        method: "element.insertBefore()",
        description: "指定要素の前に挿入",
        syntax: "parentElement.insertBefore(newElement, referenceElement)",
        example: "parent.insertBefore(newElement, existingElement)",
        notes: ["referenceElementがnullの場合は末尾に追加"],
      },
      {
        method: "element.removeChild()",
        description: "子要素を削除",
        syntax: "parentElement.removeChild(childElement)",
        example: "parent.removeChild(childElement)",
        notes: ["削除した要素を返す"],
      },
      {
        method: "element.remove()",
        description: "要素自体を削除",
        syntax: "element.remove()",
        example: "element.remove()",
        notes: ["親要素の指定不要", "ES6で追加"],
      },
      {
        method: "element.cloneNode()",
        description: "要素を複製",
        syntax: "element.cloneNode(deep)",
        example: "const clone = element.cloneNode(true)",
        notes: ["deep=trueで子要素も複製"],
      },
      {
        method: "element.addEventListener()",
        description: "イベントリスナーを追加",
        syntax: "element.addEventListener(type, listener, options)",
        example: 'button.addEventListener("click", handleClick)',
        notes: ["複数のリスナー登録可能"],
      },
      {
        method: "element.removeEventListener()",
        description: "イベントリスナーを削除",
        syntax: "element.removeEventListener(type, listener, options)",
        example: 'button.removeEventListener("click", handleClick)',
        notes: ["同じ関数オブジェクトが必要"],
      },
    ],
  },
  {
    id: "events",
    title: "イベント",
    color: "bg-teal-50 border-teal-200",
    headerColor: "bg-teal-100",
    methods: [
      {
        method: "click",
        description: "クリックイベント",
        syntax: 'element.addEventListener("click", function(event) {})',
        example: 'button.addEventListener("click", () => alert("Clicked!"))',
        notes: ["マウス・タッチで発生"],
      },
      {
        method: "mousedown / mouseup",
        description: "マウスボタンの押下・リリース",
        syntax: 'element.addEventListener("mousedown", function(event) {})',
        example: 'element.addEventListener("mousedown", handleMouseDown)',
        notes: ["clickより細かい制御"],
      },
      {
        method: "mouseover / mouseout",
        description: "マウスカーソルの進入・退出",
        syntax: 'element.addEventListener("mouseover", function(event) {})',
        example: 'element.addEventListener("mouseover", showTooltip)',
        notes: ["子要素でもバブリング"],
      },
      {
        method: "mouseenter / mouseleave",
        description: "マウスカーソルの進入・退出（バブリングなし）",
        syntax: 'element.addEventListener("mouseenter", function(event) {})',
        example: 'element.addEventListener("mouseenter", handleEnter)',
        notes: ["子要素ではバブリングしない"],
      },
      {
        method: "keydown / keyup",
        description: "キーの押下・リリース",
        syntax: 'element.addEventListener("keydown", function(event) {})',
        example: 'input.addEventListener("keydown", handleKeyDown)',
        notes: ["event.key, event.codeで判定"],
      },
      {
        method: "input",
        description: "フォーム要素の値変更",
        syntax: 'element.addEventListener("input", function(event) {})',
        example: 'input.addEventListener("input", handleInput)',
        notes: ["リアルタイムで発生"],
      },
      {
        method: "change",
        description: "フォーム要素の値確定",
        syntax: 'element.addEventListener("change", function(event) {})',
        example: 'select.addEventListener("change", handleChange)',
        notes: ["フォーカスが外れた時など"],
      },
      {
        method: "submit",
        description: "フォーム送信",
        syntax: 'form.addEventListener("submit", function(event) {})',
        example: 'form.addEventListener("submit", handleSubmit)',
        notes: ["event.preventDefault()で送信を止める"],
      },
      {
        method: "load",
        description: "リソースの読み込み完了",
        syntax: 'window.addEventListener("load", function(event) {})',
        example: 'window.addEventListener("load", handleLoad)',
        notes: ["画像・CSS・JSの読み込み完了後"],
      },
      {
        method: "DOMContentLoaded",
        description: "DOMの構築完了",
        syntax:
          'document.addEventListener("DOMContentLoaded", function(event) {})',
        example:
          'document.addEventListener("DOMContentLoaded", handleDOMLoaded)',
        notes: ["画像読み込み前に発生"],
      },
      {
        method: "resize",
        description: "ウィンドウサイズ変更",
        syntax: 'window.addEventListener("resize", function(event) {})',
        example: 'window.addEventListener("resize", handleResize)',
        notes: ["ブラウザウィンドウのリサイズ"],
      },
      {
        method: "scroll",
        description: "スクロール",
        syntax: 'element.addEventListener("scroll", function(event) {})',
        example: 'window.addEventListener("scroll", handleScroll)',
        notes: ["要素またはwindowでスクロール"],
      },
      {
        method: "focus / blur",
        description: "フォーカス取得・喪失",
        syntax: 'element.addEventListener("focus", function(event) {})',
        example: 'input.addEventListener("focus", handleFocus)',
        notes: ["フォーム要素で主に使用"],
      },
      {
        method: "event.preventDefault()",
        description: "デフォルト動作を阻止",
        syntax: "event.preventDefault()",
        example: "event.preventDefault(); // リンクのページ移動を阻止",
        notes: ["フォーム送信、リンク移動など"],
      },
      {
        method: "event.stopPropagation()",
        description: "イベントの伝播を停止",
        syntax: "event.stopPropagation()",
        example: "event.stopPropagation(); // 親要素への伝播を阻止",
        notes: ["バブリング・キャプチャリングを停止"],
      },
      {
        method: "event.target",
        description: "イベントが発生した要素",
        syntax: "event.target",
        example: "console.log(event.target.tagName)",
        notes: ["実際にクリックされた要素"],
      },
      {
        method: "event.currentTarget",
        description: "イベントリスナーが登録された要素",
        syntax: "event.currentTarget",
        example: "console.log(event.currentTarget === this)",
        notes: ["thisと同じ値"],
      },
    ],
  },
  {
    id: "es6plus",
    title: "ES6+機能",
    color: "bg-orange-50 border-orange-200",
    headerColor: "bg-orange-100",
    methods: [
      {
        method: "テンプレートリテラル",
        description: "バックティックを使った文字列",
        syntax: "`string text ${expression} string text`",
        example: "`Hello, ${name}! You are ${age} years old.`",
        notes: ["ES6で追加", "改行・式の埋め込み可能"],
      },
      {
        method: "分割代入（配列）",
        description: "配列の要素を変数に展開",
        syntax: "const [a, b, c] = array",
        example: "const [first, second] = [1, 2, 3]",
        notes: ["ES6で追加", "デフォルト値設定可能"],
      },
      {
        method: "分割代入（オブジェクト）",
        description: "オブジェクトのプロパティを変数に展開",
        syntax: "const {prop1, prop2} = object",
        example: "const {name, age} = person",
        notes: ["ES6で追加", "別名・デフォルト値設定可能"],
      },
      {
        method: "スプレッド構文（配列）",
        description: "配列の展開",
        syntax: "[...array]",
        example: "const newArray = [...array1, ...array2]",
        notes: ["ES6で追加", "配列のコピー・結合"],
      },
      {
        method: "スプレッド構文（オブジェクト）",
        description: "オブジェクトの展開",
        syntax: "{...object}",
        example: "const newObj = {...obj1, ...obj2}",
        notes: ["ES2018で追加", "オブジェクトのコピー・マージ"],
      },
      {
        method: "レスト構文",
        description: "残りの要素を配列として取得",
        syntax: "const [first, ...rest] = array",
        example:
          "function sum(...numbers) { return numbers.reduce((a, b) => a + b); }",
        notes: ["ES6で追加", "可変長引数"],
      },
      {
        method: "デフォルトパラメータ",
        description: "関数の引数にデフォルト値",
        syntax: "function name(param = defaultValue) {}",
        example: 'function greet(name = "World") { return `Hello, ${name}!`; }',
        notes: ["ES6で追加"],
      },
      {
        method: "Map",
        description: "キーと値のペアを格納",
        syntax: "new Map([[key1, value1], [key2, value2]])",
        example: 'const map = new Map([["key1", "value1"]])',
        notes: ["ES6で追加", "あらゆる型をキーにできる"],
      },
      {
        method: "Set",
        description: "一意な値のコレクション",
        syntax: "new Set([value1, value2, value3])",
        example: "const set = new Set([1, 2, 2, 3]) // {1, 2, 3}",
        notes: ["ES6で追加", "重複値は自動除去"],
      },
      {
        method: "WeakMap",
        description: "オブジェクトのみをキーとするMap",
        syntax: "new WeakMap([[object1, value1]])",
        example: 'const wm = new WeakMap(); wm.set(obj, "value");',
        notes: ["ES6で追加", "ガベージコレクション対象"],
      },
      {
        method: "WeakSet",
        description: "オブジェクトのみを格納するSet",
        syntax: "new WeakSet([object1, object2])",
        example: "const ws = new WeakSet(); ws.add(obj);",
        notes: ["ES6で追加", "ガベージコレクション対象"],
      },
      {
        method: "Symbol",
        description: "一意な識別子",
        syntax: "Symbol(description)",
        example: 'const sym = Symbol("mySymbol")',
        notes: ["ES6で追加", "プリミティブ型"],
      },
      {
        method: "for...of",
        description: "イテラブルオブジェクトのループ",
        syntax: "for (const item of iterable) {}",
        example: 'for (const char of "hello") { console.log(char); }',
        notes: ["ES6で追加", "配列・文字列・Map・Setなど"],
      },
      {
        method: "for...in",
        description: "オブジェクトのプロパティのループ",
        syntax: "for (const key in object) {}",
        example: "for (const key in obj) { console.log(key, obj[key]); }",
        notes: ["継承されたプロパティも含む"],
      },
      {
        method: "class",
        description: "クラス構文",
        syntax: "class ClassName { constructor() {} method() {} }",
        example: "class Person { constructor(name) { this.name = name; } }",
        notes: ["ES6で追加", "プロトタイプベースの糖衣構文"],
      },
      {
        method: "extends",
        description: "クラスの継承",
        syntax: "class Child extends Parent {}",
        example:
          "class Student extends Person { constructor(name, grade) { super(name); } }",
        notes: ["ES6で追加", "superキーワード"],
      },
      {
        method: "import / export",
        description: "モジュールの読み込み・エクスポート",
        syntax:
          'import { name } from "./module.js"; export const name = value;',
        example: 'import React from "react"; export default MyComponent;',
        notes: ["ES6で追加", "静的インポート"],
      },
      {
        method: "Proxy",
        description: "オブジェクトの操作をカスタマイズ",
        syntax: "new Proxy(target, handler)",
        example:
          "const proxy = new Proxy(obj, { get(target, prop) { return target[prop]; } });",
        notes: ["ES6で追加", "メタプログラミング"],
      },
      {
        method: "Reflect",
        description: "オブジェクトの操作メソッド群",
        syntax: "Reflect.get(target, propertyKey)",
        example: 'Reflect.has(obj, "prop") // obj.hasOwnProperty("prop")と類似',
        notes: ["ES6で追加", "Proxyのハンドラーと対応"],
      },
    ],
  },
  {
    id: "advanced",
    title: "高度な機能",
    color: "bg-cyan-50 border-cyan-200",
    headerColor: "bg-cyan-100",
    methods: [
      {
        method: "JSON.parse()",
        description: "JSON文字列をオブジェクトに変換",
        syntax: "JSON.parse(text, reviver)",
        example: 'const obj = JSON.parse(\'{"name": "John", "age": 30}\');',
        notes: ["構文エラーで例外発生"],
      },
      {
        method: "JSON.stringify()",
        description: "オブジェクトをJSON文字列に変換",
        syntax: "JSON.stringify(value, replacer, space)",
        example: 'const json = JSON.stringify({name: "John", age: 30});',
        notes: ["undefined、関数、Symbolは除外"],
      },
      {
        method: "localStorage",
        description: "ブラウザのローカルストレージ",
        syntax: "localStorage.setItem(key, value) / localStorage.getItem(key)",
        example: 'localStorage.setItem("user", JSON.stringify(userObj));',
        notes: ["永続的保存", "文字列のみ"],
      },
      {
        method: "sessionStorage",
        description: "ブラウザのセッションストレージ",
        syntax:
          "sessionStorage.setItem(key, value) / sessionStorage.getItem(key)",
        example: 'sessionStorage.setItem("token", authToken);',
        notes: ["タブを閉じると削除", "文字列のみ"],
      },
      {
        method: "fetch()",
        description: "HTTPリクエスト送信",
        syntax: "fetch(url, options)",
        example: 'fetch("/api/data").then(response => response.json());',
        notes: ["Promiseベース", "ネットワークエラーのみreject"],
      },
      {
        method: "URL",
        description: "URLの解析・構築",
        syntax: "new URL(url, base)",
        example: 'const url = new URL("https://example.com/path?query=value");',
        notes: ["URLの各部分にアクセス可能"],
      },
      {
        method: "URLSearchParams",
        description: "URLクエリパラメータの操作",
        syntax: "new URLSearchParams(init)",
        example: 'const params = new URLSearchParams("?foo=1&bar=2");',
        notes: ["get(), set(), append(), delete()メソッド"],
      },
      {
        method: "FormData",
        description: "フォームデータの構築",
        syntax: "new FormData(form)",
        example:
          'const formData = new FormData(); formData.append("file", file);',
        notes: ["ファイルアップロードで使用"],
      },
      {
        method: "Regular Expression",
        description: "正規表現",
        syntax: "/pattern/flags または new RegExp(pattern, flags)",
        example: 'const regex = /\\d+/g; "abc123def456".match(regex);',
        notes: ["test(), exec(), match(), replace()で使用"],
      },
      {
        method: "Date",
        description: "日付・時刻操作",
        syntax:
          "new Date() / new Date(dateString) / new Date(year, month, day)",
        example:
          'const now = new Date(); const birthday = new Date("1990-01-01");',
        notes: ["月は0から開始（0=1月）"],
      },
      {
        method: "Math",
        description: "数学関数群",
        syntax: "Math.method()",
        example: "Math.random(); Math.floor(4.7); Math.max(1, 2, 3);",
        notes: ["静的メソッドのみ", "インスタンス化不可"],
      },
      {
        method: "Error",
        description: "エラーオブジェクト",
        syntax: "new Error(message) / throw new Error(message)",
        example:
          'try { throw new Error("Something went wrong"); } catch(e) { console.log(e.message); }',
        notes: ["カスタムエラー作成可能"],
      },
      {
        method: "try...catch...finally",
        description: "エラーハンドリング",
        syntax: "try { } catch(error) { } finally { }",
        example:
          "try { JSON.parse(invalidJson); } catch(e) { console.error(e); }",
        notes: ["finallyは必ず実行"],
      },
      {
        method: "console",
        description: "デバッグ出力",
        syntax:
          "console.log() / console.error() / console.warn() / console.table()",
        example: 'console.log("Debug info"); console.table(arrayOfObjects);',
        notes: ["ブラウザの開発者ツールに出力"],
      },
      {
        method: "performance",
        description: "パフォーマンス測定",
        syntax:
          "performance.now() / performance.mark() / performance.measure()",
        example:
          "const start = performance.now(); /* 処理 */ const end = performance.now();",
        notes: ["高精度タイムスタンプ"],
      },
      {
        method: "Intl",
        description: "国際化API",
        syntax: "new Intl.DateTimeFormat() / new Intl.NumberFormat()",
        example: 'new Intl.DateTimeFormat("ja-JP").format(new Date());',
        notes: ["ロケール対応の書式設定"],
      },
    ],
  },
  {
    id: "window",
    title: "Windowオブジェクト",
    color: "bg-emerald-50 border-emerald-200",
    headerColor: "bg-emerald-100",
    methods: [
      {
        method: "window.alert()",
        description: "アラートダイアログを表示",
        syntax: "window.alert(message)",
        example: 'alert("Hello World!");',
        notes: ["ユーザー体験を阻害するため非推奨"],
      },
      {
        method: "window.confirm()",
        description: "確認ダイアログを表示",
        syntax: "window.confirm(message)",
        example: 'if (confirm("削除しますか？")) { /* 削除処理 */ }',
        notes: ["OK/キャンセルで真偽値を返す"],
      },
      {
        method: "window.prompt()",
        description: "入力ダイアログを表示",
        syntax: "window.prompt(message, defaultText)",
        example: 'const name = prompt("お名前は？", "匿名");',
        notes: ["文字列またはnullを返す"],
      },
      {
        method: "window.open()",
        description: "新しいウィンドウ・タブを開く",
        syntax: "window.open(url, target, features)",
        example: 'window.open("https://example.com", "_blank");',
        notes: ["ポップアップブロックの対象"],
      },
      {
        method: "window.close()",
        description: "ウィンドウを閉じる",
        syntax: "window.close()",
        example: "window.close(); // スクリプトで開いたウィンドウのみ",
        notes: ["セキュリティ制限あり"],
      },
      {
        method: "window.location",
        description: "現在のURLに関する情報",
        syntax: "window.location.property",
        example: 'location.href = "https://example.com"; // ページ移動',
        notes: ["href, pathname, search, hash, hostなど"],
      },
      {
        method: "window.history",
        description: "ブラウザ履歴の操作",
        syntax: "window.history.method()",
        example: "history.back(); history.forward(); history.go(-2);",
        notes: ["back(), forward(), go(), pushState(), replaceState()"],
      },
      {
        method: "window.navigator",
        description: "ブラウザ・端末情報",
        syntax: "window.navigator.property",
        example: "navigator.userAgent; navigator.language; navigator.onLine;",
        notes: ["userAgent, language, platform, onLine, geolocationなど"],
      },
      {
        method: "window.screen",
        description: "スクリーン情報",
        syntax: "window.screen.property",
        example: "screen.width; screen.height; screen.availWidth;",
        notes: ["width, height, colorDepth, pixelDepthなど"],
      },
      {
        method: "window.innerWidth / innerHeight",
        description: "ビューポートのサイズ",
        syntax: "window.innerWidth / window.innerHeight",
        example: "const viewportWidth = window.innerWidth;",
        notes: ["スクロールバーを除いた表示領域"],
      },
      {
        method: "window.outerWidth / outerHeight",
        description: "ブラウザウィンドウのサイズ",
        syntax: "window.outerWidth / window.outerHeight",
        example: "const windowWidth = window.outerWidth;",
        notes: ["ブラウザのツールバーなどを含む"],
      },
      {
        method: "window.scrollX / scrollY",
        description: "スクロール位置",
        syntax: "window.scrollX / window.scrollY",
        example: "const scrollTop = window.scrollY;",
        notes: ["pageXOffset, pageYOffsetは非推奨"],
      },
      {
        method: "window.scrollTo()",
        description: "指定位置にスクロール",
        syntax: "window.scrollTo(x, y) / window.scrollTo(options)",
        example: 'scrollTo({top: 0, behavior: "smooth"});',
        notes: ['behavior: "smooth"でスムーススクロール'],
      },
      {
        method: "window.scrollBy()",
        description: "相対的にスクロール",
        syntax: "window.scrollBy(x, y) / window.scrollBy(options)",
        example: "scrollBy(0, 100); // 100px下にスクロール",
        notes: ["現在位置からの相対移動"],
      },
      {
        method: "window.getComputedStyle()",
        description: "計算済みスタイルを取得",
        syntax: "window.getComputedStyle(element, pseudoElement)",
        example: "const styles = getComputedStyle(element); styles.color;",
        notes: ["実際に適用されているスタイル値"],
      },
      {
        method: "window.getSelection()",
        description: "選択されたテキストを取得",
        syntax: "window.getSelection()",
        example: "const selection = getSelection(); selection.toString();",
        notes: ["ユーザーが選択中のテキスト"],
      },
      {
        method: "window.matchMedia()",
        description: "メディアクエリのマッチングを確認",
        syntax: "window.matchMedia(mediaQueryString)",
        example: 'const mq = matchMedia("(max-width: 768px)"); mq.matches;',
        notes: ["CSS メディアクエリをJSで評価"],
      },
      {
        method: "window.requestAnimationFrame()",
        description: "アニメーション用コールバック登録",
        syntax: "window.requestAnimationFrame(callback)",
        example:
          "requestAnimationFrame(function animate() { /* アニメーション */ });",
        notes: ["ブラウザの描画タイミングに合わせて実行"],
      },
      {
        method: "window.cancelAnimationFrame()",
        description: "requestAnimationFrameを取り消し",
        syntax: "window.cancelAnimationFrame(requestID)",
        example:
          "const id = requestAnimationFrame(animate); cancelAnimationFrame(id);",
        notes: ["requestAnimationFrameが返すIDを使用"],
      },
      {
        method: "window.btoa() / atob()",
        description: "Base64エンコード・デコード",
        syntax: "window.btoa(string) / window.atob(encodedString)",
        example:
          'const encoded = btoa("Hello"); const decoded = atob(encoded);',
        notes: ["バイナリ文字列のみ対応、UTF-8は別途処理必要"],
      },
      {
        method: "window.encodeURIComponent() / decodeURIComponent()",
        description: "URLエンコード・デコード",
        syntax:
          "encodeURIComponent(string) / decodeURIComponent(encodedString)",
        example:
          'const encoded = encodeURIComponent("Hello World"); // "Hello%20World"',
        notes: ["URLクエリパラメータなどで使用"],
      },
      {
        method: "window.parseInt() / parseFloat()",
        description: "文字列を数値に変換",
        syntax: "parseInt(string, radix) / parseFloat(string)",
        example: 'parseInt("10", 10); parseFloat("3.14");',
        notes: ["parseInt は基数指定推奨"],
      },
      {
        method: "window.isNaN() / isFinite()",
        description: "数値の有効性チェック",
        syntax: "isNaN(value) / isFinite(value)",
        example: 'isNaN("hello"); // true, isFinite(Infinity); // false',
        notes: ["Number.isNaN(), Number.isFinite() も利用可能"],
      },
      {
        method: "window.eval()",
        description: "JavaScript コードを実行",
        syntax: "eval(string)",
        example: 'eval("console.log(\\"Hello\\")"); // セキュリティリスク',
        notes: ["セキュリティ上の理由で使用非推奨"],
      },
      {
        method: "window.onerror",
        description: "グローバルエラーハンドラ",
        syntax:
          "window.onerror = function(message, source, lineno, colno, error) {}",
        example:
          "window.onerror = (msg, url, line) => { console.error(msg); };",
        notes: ["JavaScript エラーをキャッチ"],
      },
      {
        method: "window.onunhandledrejection",
        description: "Promise エラーハンドラ",
        syntax: "window.onunhandledrejection = function(event) {}",
        example:
          "window.onunhandledrejection = e => { console.error(e.reason); };",
        notes: ["catch されていない Promise の reject"],
      },
      {
        method: "window.postMessage()",
        description: "クロスオリジン通信",
        syntax: "window.postMessage(message, targetOrigin, transfer)",
        example: 'iframe.contentWindow.postMessage("Hello", "*");',
        notes: ["iframe や Worker との安全な通信"],
      },
      {
        method: "window.customElements",
        description: "カスタム要素の登録",
        syntax: "window.customElements.define(name, constructor, options)",
        example: 'customElements.define("my-element", MyElement);',
        notes: ["Web Components で使用"],
      },
      {
        method: "window.crypto",
        description: "暗号化API",
        syntax: "window.crypto.method()",
        example: "crypto.getRandomValues(new Uint32Array(1))[0]; // 乱数生成",
        notes: ["セキュアな乱数生成、暗号化機能"],
      },
      {
        method: "window.caches",
        description: "Cache API",
        syntax: "window.caches.method()",
        example: 'caches.open("v1").then(cache => cache.add("/page"));',
        notes: ["Service Worker でのキャッシュ管理"],
      },
    ],
  },
];
